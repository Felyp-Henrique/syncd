// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../src/application/features/repositories/register_processor.go
//
// Generated by this command:
//
//	mockgen -source=../../../../src/application/features/repositories/register_processor.go -destination=mock/register_processor.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegisterProcessorRepository is a mock of RegisterProcessorRepository interface.
type MockRegisterProcessorRepository[Q any] struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterProcessorRepositoryMockRecorder[Q]
}

// MockRegisterProcessorRepositoryMockRecorder is the mock recorder for MockRegisterProcessorRepository.
type MockRegisterProcessorRepositoryMockRecorder[Q any] struct {
	mock *MockRegisterProcessorRepository[Q]
}

// NewMockRegisterProcessorRepository creates a new mock instance.
func NewMockRegisterProcessorRepository[Q any](ctrl *gomock.Controller) *MockRegisterProcessorRepository[Q] {
	mock := &MockRegisterProcessorRepository[Q]{ctrl: ctrl}
	mock.recorder = &MockRegisterProcessorRepositoryMockRecorder[Q]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterProcessorRepository[Q]) EXPECT() *MockRegisterProcessorRepositoryMockRecorder[Q] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRegisterProcessorRepository[Q]) Execute(query Q) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRegisterProcessorRepositoryMockRecorder[Q]) Execute(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegisterProcessorRepository[Q])(nil).Execute), query)
}
